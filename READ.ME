# SchooLink Backend ✅

Secure, cloud‑hosted Node.js API for **SchooLink**, an offline‑first school management system empowering schools beyond the grid in Africa.

---

## 🚀 Overview

SchooLink Backend supports:
- Role-based student registration and retrieval  
- Results submission and retrieval (CA1, CA2, Exam)  
- Attendance and report card data storage  
- Designed for low-bandwidth, offline-capable frontend 
- Admin login
- Teachers login
- Parents login 

Built with Node.js, Express, MongoDB, and deployed to Railway for reliable hosting.

---

## 🧭 Features

- **Offline-first integration**: Frontend can function offline; backend syncs online for secure persistence.
- **Student & Results APIs**: Complete CRUD for student info and exam scores.
- **Exchangeable authentication layer**: Ready for JWT or secure login expansion.
- **Cloud-ready**: Deployed on Railway with MongoDB plugin (or Atlas alternative).
- **Clean code structure**: Organized routes and models (Express + Mongoose).

---

## 🛠️ Project Structure

/schoolink-backend
├── index.js // Entry point
├── package.json
├── routes/
│ ├── students.js
│ └── results.js
└── models/
├── Student.js
└── Result.js
---
## ⚙️ Getting Started

### Prerequisites

- Node.js (v16+)
- npm or yarn
- MongoDB URI (local, Atlas, or Railway plugin)

### Local Setup

1. Clone this repo  
2. Copy `.env.example` → `.env` and update:
MONGODB_URI=your-mongodb-connection-string
PORT=5000

3. Install dependencies:
```bash
npm install
Run in development mode:
npm run dev
Server should launch at http://localhost:5001/

📡 API Endpoints
Endpoint	Method	Description
/api/students/	POST	Register a new student
/api/students/:class	GET	List students by class
/api/results/	POST	Submit a student’s results
/api/results/:studentId	GET	Retrieve results for a specific student

🤝 Frontend Integration
Your SchooLink frontend (HTML/CSS/JS) should call these endpoints instead of localStorage. Example:
fetch('https://your-app.up.railway.app/api/students', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ name, class, parent })
});
Ensure cors() is enabled, and your frontend includes authentication tokens when implemented.

📦 Deployment (Railway)
Push your backend to GitHub

Create a Railway project and link the repo

Add MongoDB plugin or connect to Atlas

Set environment variables (MONGODB_URI, PORT)

Railway will auto-deploy your app (no downtime)

💡 Future Roadmap
Add JWT-based authentication (role-based login)

Extend attendance and message report APIs

Sync offline frontend data when back online

Add analytics dashboards (performance tracking)

SMS/email notification integration for parent communication

📝 License & Credits
MIT License

Built by ABDULGANIYU TAOFEEQ — part of the Africa DeepTech Challenge 2025

📬 Contact
For questions, feedback, or collaboration:
Email: olowonjayetaofeeq@gmail.com
GitHub: @olowonjaye
